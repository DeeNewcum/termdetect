- add "advanced tests" for:

    - character encoding

        - figure out what the current encoding is   (based on which byte sequences render as a
          single character, versus which get interpretted as multiple characters)

        - ask the terminal to change character encodings, and see if it complies

- add request/reply sequences for:

    - save+restore cursor

    - scrolling region

    - horizontal tabs   (set, clear, etc)

    - alternate-screen

    - the Xterm reporting features listed in:
            vttest:     11 non-VT100,  8 XTERM,  2 test reporting functions,  2 DECRQM/DECRPM

    - double-width mode

    - double-height mode



- figure out what the goal-line is here...   what is the output we want to generate when the program finishes running?

        - output some identifier indicating what terminal we're on?

        - try to match to the current machine's terminfo database

        - try to GENERATE a customized terminfo file, specifically for the current terminal?



- figure out how to actually do the terminal matching...   some of the replies are more variable...
  do we want to do regexp matches for some of the fields?

    - figure out what format to use for the database




- once we get cmdline argument processing working:

    - add a --nose flag (for "no side-effects").  This flag would disable tests that have any sort
      of side-effects.  Of the tests we've included so far, these include:
            - visual bell  (\eg)
            - changing the window title     (two tests do this)

    - in the documentation, note that some of the tests that are most useful to use with the
      "show me the results of a single test" mode are:

            - current character encoding

            - current terminal size
                    (use Term::ReadKey::GetTerminalSize())
                    (or see "TIOCGWINSZ" in the source for IO::Tty)

            - current font size   (only available if the terminal supports getting the terminal size in pixels)

            - current screen size
                    - this requires some estimation, based on the font size
                    - note that most computer screens are either 4:3 or 16:9.
                                (16:10 can go jump off a cliff)
                      If you play around with the math a little, you realize you can just round
                      the width to the nearest 20, and the height to the nearest 15, and you'll 
                      probably be spot-on)


=========================================================
========================[ maybe ]========================
=========================================================

- add request/reply sequences for:

    - ISO-2022 suport
            apparently this is fairly rare, as even xterm itself doesn't support it:
                    http://www.pps.univ-paris-diderot.fr/~jch/software/luit/
                    http://www.cl.cam.ac.uk/~mgk25/unicode.html#term

