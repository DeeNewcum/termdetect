#!/usr/bin/perl
# Copyright (C) 2014  Dee Newcum
# https://github.com/DeeNewcum/termdetect
#
# You may redistribute this program and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
#---------------------------------------------------------------------------------------------------


# auto-detect which terminal emulator we're talking to




    use strict;
    use warnings;

    # improved FindBin
    use Cwd 'abs_path';
    use File::Basename;
    use lib $FindBin::Bin = dirname( abs_path $0 );

    use Terminfo_Parser;
    use Termdetect_Tests;
    use Termdetect_Match;

    use Getopt::Long;
    use Data::Dumper;

    
    # constants
    use constant VERSION => "0.13";


our %ARGV;
process_cmdline();

# we can't detect the terminal type if there's no terminal connected in the first place
if (!-t STDERR || !-t STDIN) {       # isatty(3)
    die "Not connected to a terminal.\n";
}

my ($fingerprintdb_file, $fingerprintdb_location) = locate_fingerprintdb_file();

if ($ARGV{version}) {
    printf "termdetect, version %s  %s\n",
            VERSION, $fingerprintdb_location eq '<internal>' ? '(embedded fingerprints_db)' : '';
    exit;
}

## read in the fingerprint database
my $fingerprint_db = parse_terminfo($fingerprintdb_file);
    #print ti_dump_terminal(values %$fingerprint_db);      exit;

## read in the test results from the current terminal
my $fingerprint = perform_all_tests();
    #print Dumper $fingerprint;     exit;
    #print ansi_escape_no_nl(Dumper $fingerprint);      exit;

## ... and match them together
my ($fingerprint_name, $num_matches) = match_fingerprint($fingerprint, $fingerprint_db,
    !($ARGV{snapshot} || $ARGV{dump} || $ARGV{check} || $ARGV{term_env}));

($fingerprint->{s_fingerprint_name}{received} = $fingerprint_name)
        =~ s/\*.*//     if $fingerprint_name;



## generate the desired output
if ($ARGV{snapshot}) {
    show_snapshot($fingerprint);

} elsif ($ARGV{dump}) {
    foreach my $cap (sort keys %$fingerprint) {
        if (-t STDOUT) {
            printf "%25s  %s\n", $cap, summarize_result($fingerprint->{$cap});
        } else {
            print "$cap\t", summarize_result($fingerprint->{$cap}), "\n";
        }
    }

} elsif ($ARGV{result}) {
    if (exists $fingerprint->{$ARGV{result}}) {
        print summarize_result($fingerprint->{$ARGV{result}}), "\n";
    }

} elsif ($ARGV{term_env}) {
    if ($num_matches == 1) {
        my $final_term = find_best_TERM($fingerprint_name, $fingerprint_db);
        if ($final_term) {
            print "$final_term\n";
            # to deal with the problem of the keyboard-buffer being cleared, we indicate to the
            # user when it's safe to start typing   (see doc/side-effects.md)
            print STDERR "-\n"
                    unless (-t STDOUT);
        } else {
            print STDERR "The suggested \$TERM \"$final_term\" wasn't found.\n";
            print STDERR "        \n";
            print STDERR "\nTo install the full set of terminfo files:\n";
            help_install_terminfos();
        }
    } else {
        print "$ENV{TERM}\n";           # failed to match, so passthrough the existing terminal
        exit;
    }

} elsif (!$ARGV{check}) {
    if (defined($fingerprint_name)) {
        (my $fingerprint_name_display = $fingerprint_name) =~ s/\*.*//;
        $fingerprint_name_display .= "  --  $fingerprint_db->{$fingerprint_name}{term_descr}"
                    if ($fingerprint_db->{$fingerprint_name}{term_descr});
        my $suggested_term = find_best_TERM($fingerprint_name, $fingerprint_db);
        my @fields = (
                ['terminal',            $fingerprint_name_display],
                ['terminal version',    $fingerprint->{s_term_version}],
                ['encoding',            $fingerprint->{s_encoding}],
                ['terminal size',       $fingerprint->{s_window_size},         '(characters)'  ],
                ['font size',           $fingerprint->{s_font_size},           '(pixels)'  ],
                ['window position',     $fingerprint->{s_window_pos},          '(pixels)'  ],
                ['screen size',         $fingerprint->{s_screen_size},         '(pixels)'  ],
        );
        foreach my $field (@fields) {
            next unless defined($field->[1]);
            my $disp = $field->[1];
            if (ref($disp) eq 'HASH' && exists $disp->{received}) {
                $disp = $disp->{received};
            }
            printf "%20s:   %s", $field->[0], $disp;
            if (@$field == 3) {         # print the suffix, if any
                print "  ", $field->[2];
            }
            print "\n";
        }

        if (!does_terminfo_exist("vt100-putty")) {
            print STDERR "\nThe full set of terminfo entries haven't been installed.\n",
                           "To install them:\n";
            help_install_terminfos();
        }
    } else {
        print STDERR "No \$TERM matched.  Run again with --check for more information.\n";
        print "$ENV{TERM}\n"        if ($ARGV{term_env});      # pass through the existing terminal
    }
}




sub process_cmdline {
    Getopt::Long::GetOptions( \%ARGV,
                    map {"$_:s"}        # all options have optional arguments, like Getopt::Casual
        "help|h|?",
        "term_env|t",
        qw( check nose snapshot result dump help-submit version ),
    ) or usage();
    %ARGV = map {length()?$_:1} %ARGV;      # arguments are optional
    $ARGV{help} and usage();
    $ARGV{'help-submit'} and help_submit();
}


sub usage {
    print <DATA>;
    exit;
}

sub help_submit {
    print STDOUT <<'EOF';

The author doesn't have access to all terminals (or all versions of terminals).
If termdetect doesn't detect your terminal, you can help greatly by submitting
the fingerprint for your particular terminal.

1. Run  termdetect --dump

2. Create a new issue at https://github.com/DeeNewcum/termdetect/issues
   or contact me via any method mentioned at https://github.com/DeeNewcum

3. In the information you send, include:

    - the output of   termdetect --dump

    - the name and version number of your terminal

    - the reason for submitting the data:   if an existing entry didn't work, or it's a new entry

And thank you!
EOF
    exit;
}


# look in various places that the fingerprints.src file could be, and if not found,
# tell the user where they can go stick it
sub locate_fingerprintdb_file {
    my @possible_locations = (
        "$FindBin::Bin/fingerprints.src",      # in the same directory as this script
        "$ENV{HOME}/.fingerprints.src",
        "/etc/fingerprints.src",
        "<internal>",
        );
    foreach my $loc (@possible_locations) {
        if ($loc eq '<internal>') {
            # When fatpacked, we include the fingerprint_db file as FingerprintDB.pm.
            # But it's not available when we're not fatpacked.
            my $internal = eval q{
                use FingerprintDB;
                FingerprintDB::fingerprint_db();
            };
            return ($internal, $loc) if (defined $internal);
        }
        return (scalar(slurp($loc)), $loc) if (-e $loc);
    }
    print STDERR <<"EOF";
Error: File 'fingerprints.src' not found.

Please copy it from the installation tarball to one of these places:
    - the same directory as this script ($FindBin::Bin)
    - \$HOME/.fingerprints.src
    - /etc/fingerprints.src
EOF
    exit 1;
}


sub find_best_TERM {
    my ($fingerprint_name, $fingerprint_db) = @_;

    my $fingerprint = $fingerprint_db->{$fingerprint_name};
    my @fallback_list = 
            (exists $fingerprint->{fields}{TERM})
            ? (split '\|', $fingerprint->{fields}{TERM}{assign})
            : ($fingerprint_name);
        #print Dumper \@fallback_list; exit;

    foreach my $fallback (@fallback_list) {
        if (does_terminfo_exist($fallback)) {
            return $fallback;
        }
    }

    return undef;
}


# check the local computer's terminfo information to see if the proposed $TERM
# is found there
sub does_terminfo_exist {
    my ($term) = @_;
    # there are many ways to do this:
    #   - toe -a    (or just `toe` in Solaris)
    #   - infocmp $TERM
    #   - tput -T$TERM longname;  echo $?

    # for now, we just implement the tput one
    my $pid = fork();
    defined($pid)   or die $!;
    if (!$pid) {
        open STDOUT, '>', '/dev/null';
        open STDERR, '>', '/dev/null';
        exec "tput", "-T$term", "longname";
    }
    waitpid($pid, 0);
    my $error_value = ($? >> 8);
    return ($error_value == 0);
}


sub help_install_terminfos {
    if (`which apt-get`) {
        # Debian/Ubuntu/et al don't come with the full set of terminfo entries
        # installed by default, but they're easy to install
        die "    sudo apt-get install ncurses-term\n";
    } else {
        die <<'EOF';

    TMP=$(mktemp);
    curl http://invisible-island.net/datafiles/current/terminfo.src.gz | gzip -dc > $TMP;
    tic $TMP; rm $TMP

Run this as root if you can, but running as a normal user is fine, files will go in ~/.terminfo/
EOF
    }
}


sub show_snapshot {
    my ($fingerprint) = @_;

    # Ways to generalize the current result by using a pattern that matches
    # multiple results.
    # If one of these patterns matches, then that's really good, because it increases the 
    # chances that we'll match other results.
    #
    # Left-most are tried first, right-most tried last.
    my %generalizations = (
        r_ext_cursor_pos    => ["\e[%+R"],
        r_window_pos        => ["\e[3;%+t"],
        r_window_size_px    => ["\e[4;%+t"],
        r_window_size_char  => ["\e[8;%+t"],
        r_screen_size       => ["\e[9;%+t"],
        r_window_title      => ["\e]l%*\e\\"],
        r_window_icon_label => ["\e]L%*\e\\"],
    );
    foreach my $list (values %generalizations) {
        unshift @$list, '';         # highest priority:  match an empty string
        push    @$list, '%+';       # lowest priority:  match a non-empty string
    }
    foreach my $cap (sort keys %$fingerprint) {
        next if $Termdetect_Tests::rarely_tested_synthetics{$cap};
        my $r = summarize_result($fingerprint->{$cap});
        foreach my $gen (@{ $generalizations{$cap} }) {
            if (Termdetect_Match::match_one_field($fingerprint->{$cap}, {assign => $gen})) {
                ($r) = ansi_escape($gen);
                last;
            }
        }
        if ($cap eq 'r_device_attr2' && $fingerprint->{$cap}{received} =~ /^\e(\[>[^;]*;)[^;]*(;.*c)$/) {
            $r = "\\E$1\%+$2";
        }
        printf "    %s=%s,\n", $cap, $r;
    }
}


# quickly read a whole file         see also: File::Slurp and IO::All->slurp()
sub slurp {my$p=open(my$f,"$_[0]")or die$!;my@o=<$f>;close$f;waitpid($p,0);wantarray?@o:join("",@o)}




__END__
termdetect

  -t    Display only the matched $TERM.  Intended to be used like this:
                export TERM=$(termdetect -t)

  --nose
        "No Side Effects".  Doesn't run tests that have significant side-effects.
        Most tests don't have side-effects, so using this option doesn't greatly
        reduce the chances of correctly identifying your terminal.
        Note that there are some smaller side-effects that are unavoidable,
        even when --nose is used.  Read more at:
            https://github.com/DeeNewcum/termdetect/blob/master/doc/side-effects.md

  --snapshot
        Outputs the current fingerprint in a form that's suitable for
        cut-n-pasting into fingerprints.src.
        
        See here for more:
            https://github.com/DeeNewcum/termdetect/blob/master/doc/customize_fingerprintsdb.md

  --version
        Show version number.

  --help-submit
        A guide for submitting a fingerprint to the developer, so that more
        terminal types will be recognized.



  --result=<test_id>
        Display the result of a single test.  This is partiularly useful for:
            s_window_size       size of the terminal, in characters
            s_font_size         size of a single character, in pixels
            s_screen_size       size of the terminal, in pixels
            s_term_version      the terminal's version
            s_encoding          UTF-8, Shift-JIS, etc
        To get a full list of test_ids, run:      termdetect --dump

  --dump
        Dumps the current terminal's fingerprint.
        Similar to --snapshot, but gives a little more detailed information.
        See here for details on what each line means:
            https://github.com/DeeNewcum/termdetect/blob/master/doc/fingerprint_db.md

  --check=<term>
        In cases that a fingerprint can't be identified, this gives you
        information about the closest matches, including differences between the
        entries in the database and the current terminal's fingerprint.

        If no terminal name is given, it displays information about EVERY
        fingerprint in the database.
