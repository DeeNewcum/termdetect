#!/usr/bin/perl
# Copyright (C) 2014  Dee Newcum
# https://github.com/DeeNewcum/termdetect
#
# You may redistribute this program and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
#---------------------------------------------------------------------------------------------------


# Estimate the round-trip time to get a response from the terminal.

# Caveat:   Latency != throughput.

#
# Caveat:   Also, note that this doesn't represent the latency to the end-user's terminal if you're
#           running things like tmux/screen/mosh.  Each of those have their own VT translation
#           layer, and they respond to pings on their own.  So if you have:
#
#               terminal  <==>    tmux  <==>  termping
#                 (US)          (China)        (China)
#           
#           you're going to see 0ms time.  That can be deceiving unless you realize that you're
#           really measuring the ping time to tmux.
#
#           Also, this is a TCP-based ping, which means that some response times may be greatly
#           inflated for several reasons including retransmission and congestion control
#           (exponential backoff can CERTAINLY skew the results).
#
# Caveat:   Some specific terminals add a lot of latency, just in ANSI-sequence handling.
#           Specific ones that seem to do this:
#                   libvte  --  response time actually varies considerably, but an average of 10ms
#
# Caveat:   Any user input while termping is running causes missed pings.
#           The reason for this is unclear.  It needs to be investigated and fixed if possible.


    use strict;
    use warnings;

    # improved FindBin
    use Cwd 'abs_path';
    use File::Basename;
    use lib dirname( abs_path $0 );

    use Termdetect_IO;

    use Time::HiRes qw[time sleep alarm];

    use Data::Dumper;



#$Termdetect_IO::DEBUG = 1;
#$Termdetect_IO::ASYNC = 0;

cooked_mode();


if (0) {
    my $began_pinging = time();
    my $num_packets = 20;
    my $latency = flood_ping_terminal($num_packets);
    my $total_time  = time() - $began_pinging;
    printf "flood pinging %d packets took   %d ms,   and measured   %d ms   average latency.\n",
                $num_packets, $total_time *1000, $latency;
    exit;
}


my @last20;
my ($min, $max) = (9999999, -1);
my $sequence_number = 1;
while (1) {
    my $start = time();
    print "\e[${sequence_number}G\e[6n";
    my $reply = read_ansi_reply(1.0, qr/\e\[\d+;${sequence_number}R/);
    my $end = time();
    print "\r";
    if ($reply =~ /^\e\[\d+;${sequence_number}R/s) {
        my $rtt = int(($end - $start) * 1000);
        $min = min($min, $rtt);
        $max = max($max, $rtt);
        push(@last20, $rtt);
        splice(@last20, 0, -20);
        my $avg = @last20 ? sum(@last20) / scalar(@last20) : 0;
        printf "%4d ms    (min %d,  max %d,   avg %.1f)\n",
                $rtt, $min, $max, $avg;
    } else {
        print "  XX\n";
    }
    sleep(0.5);
    $sequence_number = ($sequence_number % 40) + 1;
}



# Ping the terminal as fast as possible.
# Returns the average latency  (in milliseconds)
sub flood_ping_terminal {
    my ($num_packets) = @_;

    my @rtts;
    my $sequence_number = 1;
    while ($num_packets-- > 0) {
        my $start = time();
        print "\e[${sequence_number}G\e[6n";
        my $reply = read_ansi_reply(1.0, qr/\e\[\d+;${sequence_number}R/);
        my $end = time();
        my $rtt;
        if ($reply =~ /^\e\[\d+;${sequence_number}R/s) {
            $rtt = int(($end - $start) * 1000);
            push(@rtts, $rtt);
        } else {
            #print "  XX\n";
        }
        $sequence_number = ($sequence_number % 40) + 1;
        sleep(4 * $rtt / 1000);     # we actually have to delay slightly, or TCP seems to slow down after 3 or 4 packets
    }
    print "\r";
    #print Dumper \@rtts;

    # return the average of the ping times
    return sum(@rtts) / scalar(@rtts);
}




# List::Util
{no strict; sub reduce(&@) {$s=shift;@_>1||return$_[0];$c=caller;local(*{$c."::a"})=\my$a;local(*{$c."::b"})=\my$b;$a=shift;for(@_){$b=$_;$a=&{$s}()}$a}}
sub sum  { reduce { $a + $b } @_ }
sub min  { reduce { $a < $b ? $a : $b } @_ }
sub max  { reduce { $a > $b ? $a : $b } @_ }
sub minstr  { reduce { $a lt $b ? $a : $b } @_ }
sub maxstr  { reduce { $a gt $b ? $a : $b } @_ }
