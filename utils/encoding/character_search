#!/usr/bin/perl

# this searches a particular character-encoding space for matches
# 
# the intent is to answer questions like:
#
#       "is there any UTF-8 character that maps to bytes that might look like an escape sequence?"

    use strict;
    use warnings;

    use utf8;
    use charnames ();
    #use feature 'unicode_strings';
    use Encode qw[encode decode];
    require bytes;

    use Data::Dumper;
    #use Devel::Comments;           # uncomment this during development to enable the ### debugging statements

my $encoding = 'utf8';


my $generator;
my $encoder;

if ($encoding eq 'utf8') {
    $generator = utf8_generator();
    $encoder = sub {my $char = shift; utf8::encode($char); return $char; };
} else {
    die;
}


my $ctr = 0;
while (defined(my $char = $generator->())) {
    next unless ($char =~ /\p{Assigned}/);
    my $encoded = $encoder->($char);

    0 && next unless ($encoded =~ /\x9b/);       # C1 version of CSI
    #next unless ($char =~ /\p{Format}/);
    0 && next if ($char =~ /\p{Print}/
          && $char !~ /\p{Surrogate}/
          && $char !~ /\p{High_Surrogates}/);

    next unless ($char =~ /\p{Line_Break: CM}/);        # combining marks

    my $is_control = ($char =~ /\p{General_Category: Control}/);

    my @encoded = unpack("C*", $encoded);
    my $octets = join(" ", map {sprintf "%02X", $_} @encoded);
    printf "U+%04X    %-30s  %3s  %s\n",
        ord($char),
        $octets,
        $is_control ? "[C]" : "   ",
        charnames::viacode(ord($char)) || '';

    #print "\n";
    #exit;
    #exit if (++$ctr > 129);
    #exit if (++$ctr > 5);
}


# generates all possible Unicode characters
# see "Higher-Order Perl" chapter 4 for more info about generators
sub utf8_generator {
                use Unicode::UCD;
    my $cur_char = -1;
    my @blocks = sort {$a->[0] <=> $b->[0]} map { @$_ } values %{ Unicode::UCD::charblocks() };
    my $cur_range_end = -2;
    return sub {
        if ($cur_char > $cur_range_end) {
            return undef unless @blocks;        # we're all done!
            ($cur_char, $cur_range_end) = @{ shift @blocks };
        }
        return chr($cur_char++);
    }
}


# display a string to the user, via `xxd`
sub xxd {Encode::_utf8_off(my$str=shift);open my$xxd,'|-','xxd'or die$!;print$xxd $str;close$xxd}
