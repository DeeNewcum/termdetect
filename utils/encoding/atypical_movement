#!/usr/bin/perl

# give a specific encoding on the command line, and we'll point out all the characters that
# cause atypical cursor movement in that encoding


# piping the output of this to    sort -k 2    will sort the output by encoded octets, rather than
# Unicode order


# TODO:
#   - bah....  I think there are times when there are round-trip problems...  
#           I think I need to start from the desired encoding, and convert from there back
#           to UTF8...   going the other way may cause problems?
#
# NOTE to self:
#       I thought there were some combining characters in ISO-8859-2 and similar...  Turns out
#       that...   no...  these aren't combining characters.  They ARE diacritics, but strangely,
#       they can't be combined with other chars.
#                   http://www.cs.tut.fi/~jkorpela/latin1/3.html#B4

    use strict;
    use warnings;

    use encoding_utils;

    #use feature 'unicode_strings';
    use Encode qw[encode decode];
    require bytes;
    use Unicode::UCD 'charinfo';
    use charnames ();

    use Data::Dumper;
    #use Devel::Comments;           # uncomment this during development to enable the ### debugging statements

#print Dumper atypical_movement("\x{02d8}"); exit;

binmode(STDOUT, ':utf8');


my $encoding = shift;

if (!$encoding) {
    print STDERR "specify an encoding to scan:\n";
    print STDERR map {"\t$_\n"} Encode->encodings(":all");
    exit;
}

my $generator = utf8_generator();
while (defined(my $utf8_char = $generator->())) {
    my $octets = eval { encode($encoding, my $c = $utf8_char, Encode::FB_QUIET) };

    next if (defined($octets) && bytes::length($octets) == 0);      # there's no equivalent for this utf8 character

    #xxd($utf8_char);
    #xxd($octets); exit;

    #next unless (my $movement = atypical_movement($utf8_char));
    my $movement = atypical_movement($utf8_char);


    my $is_control = ($utf8_char =~ /\p{General_Category: Control}/);

    my @octets = unpack("C*", $octets);
    my $display_octets = join(" ", map {sprintf "%02X", $_} @octets);

    #print "\n";
    #printf "%-30s %-10s   %3s  %s\n",
    printf "U+%04X   %-15s  %5s  %3s   %-50s",
        ord($utf8_char),
        $display_octets,
        $movement,
        $is_control ? "[C]" : "   ",
        charnames::viacode(ord($utf8_char)) || '';

    if (!$is_control && $movement !~ /^Y/) {
        #column(53);
        print ">$utf8_char<";
    }

    print "\n";


    #last if (ord($utf8_char) > 256);
}


# does the specified utf8 character cause atypical movement?
#       returns an empty string if no, and a non-empty string describing the movement, if yes
sub atypical_movement {
    local $_ = shift;

    my $charinfo = charinfo(ord($_));
    
    return 'Y+1'    if /\v/s;

    return 'X+2'    if /\p{East_Asian_Width: Wide}|\p{Block: Halfwidth_And_Fullwidth_Forms}/;        # full-width characters
    return 'X+2'    if ($charinfo->{decomposition} =~ /^<wide> /);

    return 'X+0'    if /[\x00-\x1F\x7F-\x9F]/;              # control characters

    #return 'X+0'    if /\p{Diacritic}/;

    return 'X+0'    if /^\p{Block: Combining_Diacritical_Marks}$/;

    return 'X+0'    if /^\p{Line_Break: Combining_Mark}$/;    # combining marks

    return '';          # nope, this causes typical movement (X+1)
} 

    ## If the above fails, possible things to try:
    ##
    ##  - Unicode::UCD::charinfo()
    ##          - one of the pieces of data returned is:        http://www.fileformat.info/info/unicode/category/index.htm
    ##              - which may be the same as this?    http://perldoc.perl.org/perlunicode.html#*General_Category*
    ##
    ##  - Unicode::Normalize?




# turn off the UTF8 flag  (but *not* in-place)
sub no_utf {
    Encode::_utf8_off(my $char = shift);
    return $char;
}


sub display_encoding {
    my ($encoding) = @_;

    print "\e[s",           # save cursor
          "\e[1;1f",        # move cursor to top-left
          "\e[K",           # erase to end of line
          $encoding,
          "\e[u";           # restore cursor
}


exit;





# returns a generator
sub rotator {
    my $state = -1;
    my @chars = qw( / - \ | );
    $| = 1;
    return sub {
        $state = ($state + 1) % 4;
        return $chars[$state];
    };
}


sub criteria_C1 {
    my $encoding_scanner = sub {
        my ($encoding) = @_;

        print "======== $encoding ========\n";

        return undef;

        my $char_scanner = sub {
            my ($char, $octets) = @_;
        };
        return $char_scanner;
    };
    return $encoding_scanner;
}


# moves the cursor to the specified column on the current line
sub column {
    my $col = shift;
    print  "\r\e[${col}C";
}



# display a string to the user, via `xxd`
sub xxd {my$str=shift;Encode::_utf8_off($str);open my$xxd,'|-','xxd'or die$!;print$xxd $str;close$xxd}    
