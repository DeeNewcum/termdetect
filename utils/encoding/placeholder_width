#!/usr/bin/perl

# This script is designed to explore how placeholder glyphs are displayed, and how they move the
# cursor.
#
# A placeholder-glyph is displayed whenever the terminal tries to display a codepoint that isn't
# supported by the current font.
#
# Questions that I'm trying to answer:
#
#       - is the placeholder-glyph wider on some terminals than others?
#               (this seems like it's *visually* apparent...   libvte shows very wide placeholder
#                glyphs sometimes, but this needs to be explored fully)
#
#       - is the placeholder-glyph for a full-width codepoint wider than for a half-width codepoint?
#
#
#
# Answers:
#   
# The below are all done for UTF-8 characters:
#
#       1. placeholder-width doesn't vary significantly by terminals.
#
#       2. in general, yes.  Terminals that do this include:
#                   - libvte
#                   - putty
#                   - securecrt
#                   - konsole
#                   - linux console
#                   - urxvt
#                   - screen
#                   - tmux
#                   - mosh
#          However, a few DON'T -- they display ALL codepoints as 1-cell-wide:
#                   - teraterm
#
#       2b. Note, however, that some interpret higher characters (those that encode to UTF-8 in four
#           bytes or more) as basically double a normal character.
#           Terminals that seem to do this include:
#                   - konsole
#                   - mosh
#                   - securecrt
#                           - works on SecureCRT v6.7.2, fails on v7.0.2
#
#
# When running this script, you may want to install and uninstall various fonts, to see what the
# effect is.
#
#       - in Linux, a good way to identify fonts to uninstall is 'apt-get install font-manager'
#       
#           - or just remove files from ~/.fonts/
#
#       - a good place to go to find placeholder codepoints is:
#               http://en.wikipedia.org/wiki/Template:CJK_ideographs_in_Unicode
#               http://en.wikipedia.org/wiki/Category:Unicode_charts
#


    use strict;
    use warnings;

    use otherlibs;
    use Termdetect_Tests qw( run_test read_phase output cooked_mode do_queued_async_reads );

    use Encode;
    use charnames ();


    use Data::Dumper;
    #use Devel::Comments;           # uncomment this during development to enable the ### debugging statements


my $encoding = shift
    or die "Specify an encoding:  utf8, gb2312, or shiftjis.\n";


cooked_mode();


if ($encoding eq 'utf8') {
    binmode STDERR, ':utf8';

    placeholder(0x00A9,  undef);    # copyright symbol
    placeholder(0x00C6,  undef);    # AE ligature
    placeholder(0x2014,  undef);    # em-dash
    placeholder(0x2663,  undef);    # clubs symbol

    placeholder(0x2615,  undef);    # HOT BEVERAGE
    placeholder(0x1f4a9, undef);    # PILE OF POO
    placeholder(0x5048,  undef);    # Unicode Han Character 'brave; martial; hasty; scudding' 
    placeholder(0x2e80,  undef);    # CJK RADICAL REPEAT        (full-width)
    placeholder(0x214f,  undef);    # http://en.wikipedia.org/wiki/%E2%85%8F

} elsif ($encoding eq 'gb2312') {       # AKA "euc-cn"
    binmode STDERR, ':bytes';

    placeholder(0x3000, "\xA1\xA1");        # IDEOGRAPHIC SPACE
    placeholder(0xFFE1, "\xA1\xEA");        # FULLWIDTH POUND SIGN
    placeholder(0x3013, "\xA1\xFE");        # GETA MARK
    placeholder(0x2475, "\xA2\xC6");        # PARENTHESIZED DIGIT TWO
    placeholder(0x2461, "\xA2\xDA");        # PARENTHESIZED DIGIT TWO
    placeholder(0x3221, "\xA2\xE6");        # PARENTHESIZED IDEOGRAPH TWO

} elsif ($encoding eq 'shiftjis') {
    binmode STDERR, ':bytes';

    placeholder(0xFF1C, "\x81\x83");        # FULLWIDTH LESS-THAN SIGN
    placeholder(0x226A, "\x81\xE1");        # MUCH LESS_THAN
    placeholder(0x2203, "\x81\xCE");        # THERE EXISTS
    placeholder(0x222A, "\x81\xBE");        # UNION
    placeholder(0x2229, "\x81\xBF");        # INTERSECTION
    placeholder(0xFF41, "\x82\x81");        # FULLWIDTH LATIN SMALL LETTER A

}



sub placeholder {
    my ($unicode_char, $encoded_char) = @_;

    my $is_utf8;
    if (@_ == 2 && !defined($encoded_char)) {
        $is_utf8 = 1;
        $encoded_char = chr($unicode_char);
    } else {
        $is_utf8 = 0;
    }

    my $octets = join " ",
                      map {sprintf "%02X", $_}
                          unpack("C*", $encoded_char);

    printf STDERR "U+%04X    %-15s",
           ord($unicode_char),
           $octets;

    column(25);
    print STDERR ">";

    #run_test( $encoded_char . $encoded_char,
    run_test( $encoded_char,
        sub {
            my ($test_result) = @_;
            print STDERR "<";

            column(35);
            if (!$test_result->{timeout}) {
                printf STDERR "(%d, %d)",
                              $test_result->{x_delta} || 0,
                              $test_result->{y_delta} || 0;
            } else {
                print STDERR "timeout";
            }

            column(50);
            printf STDERR "%s\n",
                          charnames::viacode($unicode_char) || "";
        }, 0.5, 1);

    do_queued_async_reads();        # we want to do things synchronously
}



# moves the cursor to the specified column on the current line
sub column {
    my $col = shift;
    print  STDERR "\r\e[${col}C";
}
