#!/usr/bin/perl

# There are several ANSI escape codes that can be used between the server and client for
# query/reply.  This utility shows how your current terminal responds to a particular query.

    use strict;
    use warnings;

    use Time::HiRes qw[alarm];
    #use Term::ReadKey;

    use Data::Dumper;

    use constant DEBUG => 0;




## cooked mode, echo off
#Term::ReadKey::ReadMode(2);
system 'stty', '-icanon', '-echo', 'eol', "\001";
$|++;

END {
    ## reset tty mode before exiting
    #Term::ReadKey::ReadMode(0);         
    system 'stty', 'icanon', 'echo', 'eol', chr(0);
}

if (!is_cursor_position_supported()) {
    die "Terminal is unable to report the cursor position.  This is required for many tests.\n";
}


run_and_display_test("\e[5n");      # DSR - device status report
run_and_display_test("\e[x");       # terminal parameters
run_and_display_test("\e[c");       # DA - device attributes
run_and_display_test("\5");         # ENQ - enquiry character


exit;







# We use the cursor-position report a lot...   if that doesn't work, then things will get hung up
# and take way too long.
# Figure this out before we waste a lot of time.
sub is_cursor_position_supported {
    output("\e[6n");
    my $reply = read_ansi_reply(1.0, 'R');
    #print perl_string_encode($reply), "\n";
    return 0 unless defined($reply);
    return ($reply =~ /\e\[\d+;\d+R/);
}


sub run_and_display_test {
    my ($sequence) = @_;

    my $response = run_test(@_);

    printf  "%-20s   %-20s\n",
            ansi_escape($sequence),
            ansi_escape($response);
}


sub run_test {
    my ($sequence) = @_;

    output("\e[6n", $sequence, "\e[6n");      # send a CPR (cursor position report) before and after
    #debug_show_remaining_input();

    my $replies = '';
    while (1) {
        my $reply = read_ansi_reply(0.0, 'R');
        $replies .= $reply;

        if ($replies =~ /.*\e\[(\d+);(\d+)R(.*)\e\[(\d+);(\d+)R/s) {
            my $x_delta = $5 - $2;
            my $y_delta = $4 - $1;
            my $response = $3;

            die "line wrap -- we don't know how to handle this\n" if ($y_delta != 0);
            if ($x_delta != 0) {
                return "[+$x_delta]";
            } else {
                return $response;
            }
        }
    }
}




sub read_ansi_reply {
    my ($timeout,                           # seconds to wait for a reply;  use 0 for no alarm
        $response_end_character) = @_;      # if we see this character, we know the response is finished

    $timeout = 1.0 unless defined($timeout);

    my $reply = '';
    eval {
        local $SIG{ALRM} = sub { die "alarm\n" };
        alarm($timeout)     if ($timeout != 0);

        if (defined($response_end_character) && $response_end_character eq '') {
            # an empty-string means "read everything that's in the buffer"...  this assumes that
            # the response will be sent all-at-once, and that there will be a slight timegap in between
            # the response and anything the human types
            my $numchars = sysread(STDIN, $reply, 1024);
            $reply = substr($reply, 0, $numchars);
        } else {
            while (1) {
                if (defined(my $c = getc())) {
                    #print ".";
                    $reply .= $c;
                    if (defined($response_end_character)) {
                        if (ref($response_end_character) eq 'Regexp') {
                            last if ($c =~ $response_end_character);
                        } else {
                            last if ($c eq $response_end_character);
                        }
                    }
                }
            }
        }
    };
    if ($@) {
        return undef if ($@ eq "alarm\n");
        die $@;
    }
    print "got reply: ", ansi_escape($reply), "\n"      if (DEBUG);
    return $reply;
}


sub output {
    my $str = join("", @_);
    print "  sending: ", ansi_escape($str), "\n"        if (DEBUG);
    print $str;
    $|++;
}



sub debug_show_remaining_input {
    print "---- debug_show_remaining_input ----\n";
    while (my $reply = read_ansi_reply(0.0, '')) {
        print ansi_escape($reply), "\n";
    }
    exit;
}




# turn things like "\e" and "\033" into their single-character equivalents, using standard perl string-literal rules
sub perl_string_decode {
    my $encoded = shift;
    my $decoded = eval "qq\000$encoded\000";
}


# turn things like chr(27) into '\e' -- into a visible presentation
sub perl_string_encode {
    my $decoded = shift;
    my $encoded = Data::Dumper::qquote($decoded);
    $encoded =~ s/^"(.*)"$/$1/s;
    return $encoded;
}

sub ansi_escape { map {(my $a = $_);
        $a =~ s/\e/\\e/g;
        $a =~ s/\x5/\\5/g;
        $a} @_ }


# display a string to the user, via `xxd`
sub xxd {open my$xxd,"|xxd"or die$!;print$xxd $_[0];close$xxd}
