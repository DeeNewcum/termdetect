{"name":"termdetect","tagline":"auto-detect which terminal emulator we're talking to","body":"<p align=\"center\">\r\n  <img src=\"http://deenewcum.github.com/termdetect/images/termdetect_putty.png\"/>\r\n</p>\r\n\r\ntermdetect is a tool that auto-detects which terminal you're using (eg. Putty, Xterm, Konsole). It's typically used by server-side scripts that want to tailor their behavior to specific terminals. Termdetect does its job by communicating directly with the terminal via escape codes, so it's much more reliable than $TERM.\r\n\r\nThere are various ways to use it, but one way to use it is to automatically set your $TERM:\r\n\r\n````bash\r\nexport TERM=$(termdetect -t)\r\n````\r\n\r\nTermdetect currently detects these, and is growing to detect more â€” aterm, dtterm, iTerm2.app, konsole, linux (console), mosh, mrxvt, nsterm, putty, rxvt, screen, securecrt, teraterm, tmux, vte, and xterm.\r\n\r\n## How does it work?\r\n\r\nTerdetect figures out a \"fingerprint\" of the current terminal by sending various ANSI escape codes to the terminal and seeing how the terminal responds. It looks up the fingerprint in a [database of known terminal fingerprints](https://github.com/DeeNewcum/termdetect/blob/master/src/fingerprints.src), and reports which terminal matches the fingerprint.\r\n\r\n## Installation\r\n\r\n    curl -L http://is.gd/termdetect -o termdetect;  chmod +x termdetect\r\n        or\r\n    wget http://is.gd/termdetect;  chmod +x termdetect\r\n\r\nRequirements: A base installation of Perl, and [any Un*x or OS/X](https://github.com/DeeNewcum/termdetect/blob/master/doc/tested_on.txt).\r\n\r\n## Other ways to use it\r\n\r\n````vim\r\n\" ~/.vimrc\r\nsyntax on\r\nif &t_Co >= 256 || has('gui_running')\r\n    \" your prefered colorscheme when the terminal supports 256 colors\r\n    let g:solarized_termcolors=&t_Co\r\n    colorscheme solarized\r\nelse\r\n    \" your prefered colorscheme when the terminal supports 16 colors\r\n    colorscheme pablo\r\nendif\r\n````\r\n\r\nMost people have learned to mistrust $TERM and terminfo, and so hard-code everything.  Once you're able to trust them again, your configuration can be much more flexible and adaptive.","google":"UA-36026505-1","note":"Don't delete this file! It's used internally to help with page regeneration."}